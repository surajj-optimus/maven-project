/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.27
 * Generated at: 2018-03-23 06:37:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.sql.*;
import service1.CheckListManagementService;
import model1.CheckListModel;
import java.util.*;

public final class CheckList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("service1.CheckListManagementService");
    _jspx_imports_classes.add("model1.CheckListModel");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n");
      out.write("    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n");
      out.write("<script src=\"https://code.jquery.com/jquery-1.11.3.min.js\"></script>\n");
      out.write("<script src=\"https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n");
      out.write("<title>Sort a HTML Table Alphabetically</title>\n");
      out.write("<style>\n");
      out.write("    #myInput {\n");
      out.write("  background-image: url('/css/searchicon.png');\n");
      out.write("  background-position: 10px 10px;\n");
      out.write("  background-repeat: no-repeat;\n");
      out.write("  width: 100%;\n");
      out.write("  font-size: 16px;\n");
      out.write("  padding: 12px 20px 12px 40px;\n");
      out.write("  border: 1px solid #ddd;\n");
      out.write("  margin-bottom: 12px;\n");
      out.write("}\n");
      out.write("table {\n");
      out.write("    border-spacing: 0;\n");
      out.write("    width: 100%;\n");
      out.write("    border: 1px solid #ddd;\n");
      out.write("}\n");
      out.write("\n");
      out.write("th {\n");
      out.write("    cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write("th, td {\n");
      out.write("    text-align: left;\n");
      out.write("    padding: 16px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("tr:nth-child(even) {\n");
      out.write("    background-color: #f2f2f2\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("    <style>\n");
      out.write("        #add:hover\n");
      out.write("        {\n");
      out.write("            cursor:pointer\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("    \n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<table data-role=\"table\" data-mode=\"columntoggle\" class=\"ui-responsive ui-shadow\" id=\"myTable\" data-filter=\"true\" data-input=\"#filterTable-input\">\n");
      out.write("    ");

    
    CheckListManagementService list = new CheckListManagementService();
                                                if(request.getParameter("id")!=null && request.getParameter("name")!=null)
                    {
                    	list.addCheckList(request.getParameter("id").toString(), request.getParameter("name").toString());
                    }
                                                list.viewCheckList();
                    
                                                
    
      out.write("\n");
      out.write("  <tr>\n");
      out.write("   <!--When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by names, 1 for sorting by country:-->  \n");
      out.write("    <th onclick=\"sortTable(0)\">Name</th>\n");
      out.write("    <th onclick=\"sortTable(1)\">Country</th>\n");
      out.write("    <th>Edit</th>\n");
      out.write("  </tr>\n");
      out.write("  <tr>\n");
      out.write("  <form action=\"CheckList.jsp\" method=\"get\">\n");
      out.write("      <td><input id=\"id1\" type=\"text\" name=\"id\"/></td>\n");
      out.write("      <td><input id=\"name1\" type=\"text\" name=\"name\"/></td>\n");
      out.write("      <td><input type=\"submit\" /></td>\n");
      out.write("      </form>\n");
      out.write("  </tr>\n");
      out.write("  ");

  						
                        for (CheckListModel checklist : list.getCheckListCollection()) {
      out.write("\n");
      out.write("\n");
      out.write("                    <tr>\n");
      out.write("                        <td>");
      out.print( checklist.getId());
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( checklist.getName());
      out.write("</td>\n");
      out.write("                        <td><div id=\"edit\" class=glyphicon glyphicon-pencil style=\"color:blue\" onclick=\"edit()\">\n");
      out.write("          <span class=\"glyphicon glyphicon-pencil\"></span>\n");
      out.write("        </div></td>\n");
      out.write("                    </tr>\n");
      out.write("                    ");
 }
      out.write("\n");
      out.write("                    \n");
      out.write("                    ");

                    
                    
      out.write("\n");
      out.write("\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("function sortTable(n) {\n");
      out.write("  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;\n");
      out.write("  table = document.getElementById(\"myTable\");\n");
      out.write("  switching = true;\n");
      out.write("  //Set the sorting direction to ascending:\n");
      out.write("  dir = \"asc\"; \n");
      out.write("  /*Make a loop that will continue until\n");
      out.write("  no switching has been done:*/\n");
      out.write("  while (switching) {\n");
      out.write("    //start by saying: no switching is done:\n");
      out.write("    switching = false;\n");
      out.write("    rows = table.getElementsByTagName(\"TR\");\n");
      out.write("    /*Loop through all table rows (except the\n");
      out.write("    first, which contains table headers):*/\n");
      out.write("    for (i = 1; i < (rows.length - 1); i++) {\n");
      out.write("      //start by saying there should be no switching:\n");
      out.write("      shouldSwitch = false;\n");
      out.write("      /*Get the two elements you want to compare,\n");
      out.write("      one from current row and one from the next:*/\n");
      out.write("      x = rows[i].getElementsByTagName(\"TD\")[n];\n");
      out.write("      y = rows[i + 1].getElementsByTagName(\"TD\")[n];\n");
      out.write("      /*check if the two rows should switch place,\n");
      out.write("      based on the direction, asc or desc:*/\n");
      out.write("      if (dir == \"asc\") {\n");
      out.write("        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\n");
      out.write("          //if so, mark as a switch and break the loop:\n");
      out.write("          shouldSwitch= true;\n");
      out.write("          break;\n");
      out.write("        }\n");
      out.write("      } else if (dir == \"desc\") {\n");
      out.write("        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {\n");
      out.write("          //if so, mark as a switch and break the loop:\n");
      out.write("          shouldSwitch= true;\n");
      out.write("          break;\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("    if (shouldSwitch) {\n");
      out.write("      /*If a switch has been marked, make the switch\n");
      out.write("      and mark that a switch has been done:*/\n");
      out.write("      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n");
      out.write("      switching = true;\n");
      out.write("      //Each time a switch is done, increase this count by 1:\n");
      out.write("      switchcount ++;      \n");
      out.write("    } else {\n");
      out.write("      /*If no switching has been done AND the direction is \"asc\",\n");
      out.write("      set the direction to \"desc\" and run the while loop again.*/\n");
      out.write("      if (switchcount == 0 && dir == \"asc\") {\n");
      out.write("        dir = \"desc\";\n");
      out.write("        switching = true;\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("  }\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
