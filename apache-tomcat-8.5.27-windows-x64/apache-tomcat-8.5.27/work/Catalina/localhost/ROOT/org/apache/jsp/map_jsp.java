/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.27
 * Generated at: 2018-03-16 04:28:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("  <head>\n");
      out.write("    <meta charset=\"UTF-8\" />\n");
      out.write("    <title>Find a route using Geolocation and Google Maps API</title>\n");
      out.write("    <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\"></script>\n");
      out.write("     <script async defer\n");
      out.write("    src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDMmcGCdsXxNla6pmZQGr1GyPnGb5mtNf4&amp;callback=initMap\">\n");
      out.write("    </script>\n");
      out.write("    <script>\n");
      out.write("      function calculateRoute(from, to) {\n");
      out.write("        // Center initialized to Naples, Italy\n");
      out.write("        var myOptions = {\n");
      out.write("          zoom: 10,\n");
      out.write("          center: new google.maps.LatLng(40.84, 14.25),\n");
      out.write("          mapTypeId: google.maps.MapTypeId.ROADMAP\n");
      out.write("        };\n");
      out.write("        // Draw the map\n");
      out.write("        var mapObject = new google.maps.Map(document.getElementById(\"map\"), myOptions);\n");
      out.write("\n");
      out.write("        var directionsService = new google.maps.DirectionsService();\n");
      out.write("        var directionsRequest = {\n");
      out.write("          origin: from,\n");
      out.write("          destination: \"");
request.getParameter("p");
      out.write("\",\n");
      out.write("          travelMode: google.maps.DirectionsTravelMode.DRIVING,\n");
      out.write("          unitSystem: google.maps.UnitSystem.METRIC\n");
      out.write("        };\n");
      out.write("        directionsService.route(\n");
      out.write("          directionsRequest,\n");
      out.write("          function(response, status)\n");
      out.write("          {\n");
      out.write("            if (status == google.maps.DirectionsStatus.OK)\n");
      out.write("            {\n");
      out.write("              new google.maps.DirectionsRenderer({\n");
      out.write("                map: mapObject,\n");
      out.write("                directions: response\n");
      out.write("              });\n");
      out.write("            }\n");
      out.write("            else\n");
      out.write("              $(\"#error\").append(\"Unable to retrieve your route<br />\");\n");
      out.write("          }\n");
      out.write("        );\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      $(document).ready(function() {\n");
      out.write("        // If the browser supports the Geolocation API\n");
      out.write("        if (typeof navigator.geolocation == \"undefined\") {\n");
      out.write("          $(\"#error\").text(\"Your browser doesn't support the Geolocation API\");\n");
      out.write("          return;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        $(\"#from-link\").click(function(event) {\n");
      out.write("          event.preventDefault();\n");
      out.write("          var addressId = this.id.substring(0, this.id.indexOf(\"-\"));\n");
      out.write("\n");
      out.write("          navigator.geolocation.getCurrentPosition(function(position) {\n");
      out.write("            var geocoder = new google.maps.Geocoder();\n");
      out.write("            geocoder.geocode({\n");
      out.write("              \"location\": new google.maps.LatLng(position.coords.latitude, position.coords.longitude)\n");
      out.write("            },\n");
      out.write("            function(results, status) {\n");
      out.write("              if (status == google.maps.GeocoderStatus.OK)\n");
      out.write("                $(\"#\" + addressId).val(results[0].formatted_address);\n");
      out.write("              else\n");
      out.write("                $(\"#error\").append(\"Unable to retrieve your address<br />\");\n");
      out.write("            });\n");
      out.write("          },\n");
      out.write("          function(positionError){\n");
      out.write("            $(\"#error\").append(\"Error: \" + positionError.message + \"<br />\");\n");
      out.write("          },\n");
      out.write("          {\n");
      out.write("            enableHighAccuracy: true,\n");
      out.write("            timeout: 10 * 1000 // 10 seconds\n");
      out.write("          });\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        $(\"#calculate-route\").submit(function(event) {\n");
      out.write("          event.preventDefault();\n");
      out.write("          calculateRoute($(\"#from\").val(), $(\"#to\").val());\n");
      out.write("        });\n");
      out.write("      });\n");
      out.write("    </script>\n");
      out.write("    <style type=\"text/css\">\n");
      out.write("      #map {\n");
      out.write("        width: 500px;\n");
      out.write("        height: 400px;\n");
      out.write("        margin-top: 10px;\n");
      out.write("      }\n");
      out.write("    </style>\n");
      out.write("  </head>\n");
      out.write("  <body>\n");
      out.write("    <h1>Calculate your route</h1>\n");
      out.write("    <form id=\"calculate-route\" name=\"calculate-route\" action=\"#\" method=\"get\">\n");
      out.write("      <label for=\"from\">From:</label>\n");
      out.write("      <input type=\"text\" id=\"from\" name=\"from\" required=\"required\" placeholder=\"An address\" size=\"30\" />\n");
      out.write("      <a id=\"from-link\" href=\"#\">Get my position</a>\n");
      out.write("      <br />\n");
      out.write("\n");
      out.write("      <label for=\"to\">To:</label>\n");
      out.write("      <input type=\"text\" id=\"to\" name=\"to\" required=\"required\" placeholder=\"Another address\" size=\"30\" />\n");
      out.write("      <a id=\"to-link\" href=\"#\">Get my position</a>\n");
      out.write("      <br />\n");
      out.write("\n");
      out.write("      <input type=\"submit\" />\n");
      out.write("      <input type=\"reset\" />\n");
      out.write("    </form>\n");
      out.write("    <div id=\"map\"></div>\n");
      out.write("    <p id=\"error\"></p>\n");
      out.write("  </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
