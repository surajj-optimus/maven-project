/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.27
 * Generated at: 2018-03-12 07:07:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import newpackage1.NewClass;
import newpackage1.model;

public final class newjsp_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("newpackage1.model");
    _jspx_imports_classes.add("newpackage1.NewClass");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<title>COMPANY LOCATOR</title>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Raleway\">\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n");
      out.write("<style>\n");
      out.write("body,h1,h2,h3,h4,h5,h6 {font-family: \"Raleway\", Arial, Helvetica, sans-serif}\n");
      out.write(".myLink {display: none}\n");
      out.write("</style>\n");
      out.write("<body class=\"w3-light-grey\">\n");
      out.write("\n");
      out.write("<!-- Navigation Bar -->\n");
      out.write("<div class=\"w3-top\">\n");
      out.write("<div class=\"w3-bar w3-white w3-border-bottom w3-xlarge\">\n");
      out.write("  <a href=\"#\" class=\"w3-bar-item w3-button w3-text-blue w3-hover-blue\"><b><i class=\"fa fa-map-marker w3-margin-right\"></i>Company Locator</b></a>\n");
      out.write("\n");
      out.write("</div>\n");
      out.write("</div>\n");
      out.write("        ");
 try {
      out.write("\n");
      out.write("        ");

            NewClass.location=request.getParameter("send");
            NewClass.main();
            String urlLink="https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=";
            String apiKey="&key=AIzaSyCjP5YqyBtzNzJ5JrabOk3u1lPPkaqFn64";
        
      out.write("\n");
      out.write("        \n");
      out.write(" <div class=\"w3-main w3-content w3-padding\" style=\"max-width:1200px;margin-top:100px\">\n");
      out.write("\n");
      out.write("  <!-- First Photo Grid-->\n");
      out.write("  <div class=\"w3-row-padding w3-padding-16 w3-center\" id=\"food\" >\n");
      out.write("  ");
 for(model object: NewClass.o) {
      out.write("\n");
      out.write("    <div class=\"w3-quarter\" style=\"width:max-content; height:300px \">\n");
      out.write("       <h3 style=\"width: 210px;\n");
      out.write("     white-space: nowrap;\n");
      out.write("     overflow: hidden;\n");
      out.write("     text-overflow: ellipsis;\"\n");
      out.write("           \n");
      out.write("           >");
out.print(object.name);
      out.write("</h3>\n");
      out.write("      <p style=\"width: 210px;\n");
      out.write("     white-space: nowrap;\n");
      out.write("     overflow: hidden;\n");
      out.write("     text-overflow: ellipsis;\">");
out.print(object.address);
      out.write("</p>\n");
      out.write("\t        <p>\n");
      out.write("                    ");
if(object.map!=null)
            {
      out.write("\n");
      out.write("      <form action=\"");
      out.print(object.map);
      out.write("\" target=\"_blank\">\n");
      out.write("                <input type=\"submit\" value=\"View Image\">\n");
      out.write("            </form>\n");
      out.write("                ");
}
else{
      out.write("\n");
      out.write("<p>Image Not Found</p>\n");
      out.write("            ");

                }
            
      out.write("\n");
      out.write("\t  </p>\n");
      out.write("    </div>\n");
      out.write("\t");
}
      out.write("\n");
      out.write("  </div>\n");
      out.write("</div>\n");
      out.write("  ");
}catch(Exception e)
{
      out.write("\n");
      out.write("    <center><p><font size=\"+2\" color=\"red\">No Companies Found</font></p></center>\n");
}
      out.write("\n");
      out.write("    </body>\n");
      out.write("</html>           \n");
      out.write("            \n");
      out.write("            \n");
      out.write("            \n");
      out.write("            \n");
      out.write("            \n");
      out.write("            \n");
      out.write("            \n");
      out.write("            \n");
      out.write("            \n");
      out.write("            \n");
      out.write("            \n");
      out.write("            \n");
      out.write("            \n");
      out.write("            \n");
      out.write("            \n");
      out.write("\n");
      out.write("        \n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
